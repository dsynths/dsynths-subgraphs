enum MarketType {
  FOREX
  METALS
  ENERGIES
  INDICES
  STOCKS
  COMMODITIES
  BONDS
  ETFS
  CRYPTO
}

enum Side {
  BUY
  SELL
}

enum HedgerMode {
  SINGLE
  HYBRID
  AUTO
}

enum OrderType {
  LIMIT
  MARKET
}

enum PositionType {
  ISOLATED
  CROSS
}

enum RequestForQuoteState {
  ORPHAN
  CANCELATION_REQUESTED
  CANCELED
  REJECTED
  ACCEPTED
}

enum PositionState {
  OPEN
  MARKET_CLOSE_REQUESTED
  MARKET_CLOSE_CANCELATION_REQUESTED
  LIMIT_CLOSE_REQUESTED
  LIMIT_CLOSE_CANCELATION_REQUESTED
  LIMIT_CLOSE_ACTIVE
  CLOSED
  LIQUIDATED
}

type MasterAgreement @entity {
  id: ID!
  activeRequestForQuotes: [RequestForQuote!]!
  activePositionsIsolated: [Position!]!
  activePositionsCross: [Position!]!
  cumulativeRequestForQuotes: BigInt!
  cumulativePositionsIsolated: BigInt!
  cumulativePositionsCross: BigInt!
}

type HourlySnapshot @entity {
  id: ID!
  timestamp: BigInt!
  cumulativeRequestForQuotes: BigInt!
  cumulativePositionsIsolated: BigInt!
  cumulativePositionsCross: BigInt!
}

type DailySnapshot @entity {
  id: ID!
  timestamp: BigInt!
  cumulativeRequestForQuotes: BigInt!
  cumulativePositionsIsolated: BigInt!
  cumulativePositionsCross: BigInt!
}

type Hedger @entity {
  id: ID!
  address: Bytes!
  pricingURLs: [String!]!
  marketsURLs: [String!]!
}

type Market @entity {
  id: ID!
  marketId: BigInt!
  identifier: String!
  marketType: MarketType!
  active: Boolean!
  baseCurrency: String!
  quoteCurrency: String!
  symbol: String!
  muonPriceFeedId: Bytes!
  fundingRateId: Bytes!
}

type RequestForQuote @entity {
  id: ID!
  creationTimestamp: BigInt!
  mutableTimestamp: BigInt!
  rfqId: BigInt!
  state: RequestForQuoteState!
  positionType: PositionType!
  orderType: OrderType!
  partyA: Bytes!
  partyB: Bytes!
  hedgerMode: HedgerMode!
  market: Market!
  side: Side!
  notionalUsd: BigDecimal!
  lockedMarginA: BigDecimal!
  protocolFee: BigDecimal!
  liquidationFee: BigDecimal!
  cva: BigDecimal!
  minExpectedUnits: BigDecimal!
  maxExpectedUnits: BigDecimal!
  affiliate: Bytes!
  leverageUsed: BigDecimal!
}

type Position @entity {
  id: ID!
  creationTimestamp: BigInt!
  mutableTimestamp: BigInt!
  positionId: BigInt!
  uuid: Bytes!
  state: PositionState!
  positionType: PositionType!
  market: Market!
  partyA: Bytes!
  partyB: Bytes!
  side: Side!
  lockedMarginA: BigDecimal!
  lockedMarginB: BigDecimal!
  protocolFeePaid: BigDecimal!
  liquidationFee: BigDecimal!
  cva: BigDecimal!
  currentBalanceUnits: BigDecimal!
  initialNotionalUsd: BigDecimal!
  affiliate: Bytes!
  leverageUsed: BigDecimal!
}

type Fill @entity {
  id: ID!
  marketId: BigInt!
  positionId: BigInt!
  party: Bytes!
  side: Side!
  amount: BigDecimal!
  price: BigDecimal!
  transactionHash: String!
  timestamp: BigInt!
}

type Party @entity {
  id: ID!
  openRequestForQuotes: [RequestForQuote!]!
  openPositionsIsolated: [Position!]!
  openPositionsCross: [Position!]!
}
